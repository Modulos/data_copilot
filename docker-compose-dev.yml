version: "3.7"
services:
  nginx:
    image: data-copilot-nginx
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
      - adminer

    environment:
      ENVIRONMENT: DEVELOPMENT

  database:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    volumes:
      - type: volume
        source: db-storage
        target: /var/lib/postgresql/data
    command: postgres -c listen_addresses=0.0.0.0

  install-frontend-dependencies:
    image: data-copilot-frontend-dev
    volumes:
      - ./data_copilot/frontend:/app
    command: npm install

  frontend:
    image: data-copilot-frontend-dev
    ports:
      - "8080:80"
    volumes:
      - ./data_copilot/frontend:/app
    command: npm run dev -- --port 80 --host
    depends_on:
      install-frontend-dependencies:
        condition: service_completed_successfully

  backend:
    &backend
    image: data-copilot-backend
    ports:
      - "8000:80"
    environment:
      BACKEND_HOST: ${BACKEND_HOST}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      DB_CONNECTION_STRING: ${DB_CONNECTION_STRING}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      STORAGE_BACKEND: ${STORAGE_BACKEND}
      ENVIRONMENT: DEVELOPMENT
      COMPUTE_BACKEND: ${COMPUTE_BACKEND}

    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "http://localhost/api/health"
        ]
      interval: 10s
      timeout: 5s
      retries: 5

    restart: always

    depends_on:
      - database
    volumes:
      - ./data_copilot/backend:/home/fastapi_user/app/data_copilot/backend
      - ./data_copilot/execution_apps:/home/fastapi_user/app/data_copilot/execution_apps
      - shared-fs:/home/fastapi_user/app/shared-fs
    user: "1000:1000"
    command: uvicorn data_copilot.backend.main:app --host 0.0.0.0 --port 80 --reload --log-level debug

  adminer:
    image: adminer
    ports:
      - "8010:8080"
    depends_on:
      - database

  reset-db:
    <<: *backend
    command: python data_copilot/backend/setup/setup.py
    ports:
      - "8001:80"
    profiles:
      - reset_db

  redis-queue:
    image: redis:alpine
    container_name: redis-queue
    restart: always
    ports:
      - 6378:6378
    command: redis-server --appendonly yes --port 6378

  celery-worker:
    &worker
    image: data-copilot-celery-worker
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      DB_CONNECTION_STRING: ${DB_CONNECTION_STRING}
      TOKENIZERS_PARALLELISM: false
      ENVIRONMENT: DEVELOPMENT
      COMPUTE_BACKEND: ${COMPUTE_BACKEND}
      STORAGE_BACKEND: ${STORAGE_BACKEND}

    depends_on:
      backend:
        condition: service_healthy

    volumes:
      - ./data_copilot/celery_app:/home/celery_user/app/data_copilot/celery_app
      - ./data_copilot/execution_apps:/home/celery_user/app/data_copilot/execution_apps
      - ./data_copilot/storage_handler:/home/celery_user/app/data_copilot/storage_handler
      - shared-fs:/home/celery_user/app/shared-fs
    user: "1000:1000"
    command: watchmedo auto-restart -d ./data_copilot/ -p "*.py;*.cfg" --recursive -- celery -A data_copilot.celery_app.worker.execution_app worker --loglevel=info --concurrency=1

  flower:
    image: data-copilot-celery-flower
    environment:
      - BROKER_URL=${CELERY_BROKER_URL}

    ports:
      - 5555:5555
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:5555/" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    command: celery flower

volumes:
  db-storage:
  shared-fs:
